//剩余时间倒计时
showRule = () => {
    if (this.state.currRemain != 0) {
        let time = this.state.currRemain;
        let hour = Math.floor(time / 3600);
        time -= hour * 3600;
        let minute = Math.floor(time / 60);
        time -= minute * 60;
        let second = Math.floor(time / 1);
        if (hour < 10) { hour = `0${hour}`; }
        if (minute < 10) { minute = `0${minute}`; }
        if (second < 10) { second = `0${second}`; }
        this.setState({ timeBack: `${hour}:${minute}:${second}`, currRemain: this.state.currRemain - 1 });
        this.timeId = setTimeout(this.showD11Rule, 1000);
    } else {
        this.setState({ timeBack: '00:00:00' });
        clearTimeout(this.timeId);
    }
}


//深拷贝
function getType(obj){
   //tostring会返回对应不同的标签的构造函数
   var toString = Object.prototype.toString;
   var map = {
      '[object Boolean]'  : 'boolean', 
      '[object Number]'   : 'number', 
      '[object String]'   : 'string', 
      '[object Function]' : 'function', 
      '[object Array]'    : 'array', 
      '[object Date]'     : 'date', 
      '[object RegExp]'   : 'regExp', 
      '[object Undefined]': 'undefined',
      '[object Null]'     : 'null', 
      '[object Object]'   : 'object'
  };
  if(obj instanceof Element) {
       return 'element';
  }
  return map[toString.call(obj)];
}

function deepClone(data){
   var type = getType(data);
   var obj;
   if(type === 'array'){
       obj = [];
   } else if(type === 'object'){
       obj = {};
   } else {
       //不再具有下一层次
       return data;
   }
   if(type === 'array'){
       for(var i = 0, len = data.length; i < len; i++){
           obj.push(deepClone(data[i]));
       }
   } else if(type === 'object'){
       for(var key in data){
           obj[key] = deepClone(data[key]);
       }
   }
   return obj;
}


// 封装的下载数据函数
function downLoadFile(fileName, content) {
    var aTag = document.createElement('a');   // 获取 a 元素
    var blob = new Blob([content]);           // 将数据保存在 blob 对象中
    aTag.download = fileName;                 // 设置保存的文件名称
    aTag.href = URL.createObjectURL(blob);    // 将数据保存在 href 属性中
    aTag.click();                             // 模拟点击 a 元素，进行下载
    URL.revokeObjectURL(blob);                // 删除内存中的 blob 对象的数据
}

// 调用下载接口
function saveConfig() {
    downLoadFile('nav.config.json', window.localStorage.navInfos)
}
   
